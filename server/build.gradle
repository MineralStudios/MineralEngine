plugins {
    id 'com.gradleup.shadow' version '8.3.6'
    id 'application'
}

application {
    mainClass = 'gg.mineral.server.MinecraftServerImpl'
}

dependencies {
    implementation project(':api')
    implementation 'io.netty:netty-all:4.2.0.Final'
    implementation 'com.velocitypowered:velocity-native:3.4.0-20241204.173938-17'
    implementation 'org.json:json:20250107'
    implementation 'com.eatthepath:fast-uuid:0.2.0'
    implementation 'it.unimi.dsi:fastutil:8.5.15'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    implementation 'net.minecrell:terminalconsoleappender:1.3.0'
    implementation 'org.jline:jline-reader:3.29.0'
    implementation 'org.jline:jline-terminal:3.29.0'
    implementation 'org.apache.groovy:groovy-all:4.0.26'
    compileOnly 'net.md-5:bungeecord-chat:1.21-R0.3-SNAPSHOT'

    compileOnly 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.3.100'
    annotationProcessor 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.3.100'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set('')
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'gg.mineral.server.MinecraftServerImpl'
        attributes 'Multi-Release': 'true'
    }
    from(sourceSets.main.resources.srcDirs) {
        into('/')
    }
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

tasks.build {
    dependsOn shadowJar
    tasks.jar.enabled = false
}

tasks.named('run') {
    dependsOn shadowJar
    doFirst {
        javaexec {
            mainClass.set('gg.mineral.server.MinecraftServerImpl')
            classpath = files(shadowJar.archiveFile.get())
        }
    }
}

tasks.distZip {
    dependsOn shadowJar
}

tasks.distTar {
    dependsOn shadowJar
}

tasks.startScripts {
    dependsOn shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(tasks.shadowJar) {
                classifier = null
            }
        }
    }
}


